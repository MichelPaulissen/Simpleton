//=====================================================================================================================
//
//   DX11BufferPool.cpp
//
//   Implementation of class: Simpleton::DX11BufferPool
//
//   The lazy man's utility library
//   Joshua Barczak
//   Copyright 2014 Joshua Barczak
//
//   LICENSE:  See Doc\License.txt for terms and conditions
//
//=====================================================================================================================

#include "Simpleton.h"
#include "ComPtr.h"
#include <d3d11.h>
#include "DX11/DX11BufferPool.h"

namespace Simpleton
{

    //=====================================================================================================================
    //
    //            Public Methods
    //
    //=====================================================================================================================
    
    DX11BufferPool::~DX11BufferPool()
    {
        ReleaseBuffers();
    }

    //=====================================================================================================================
    //=====================================================================================================================
    ID3D11Buffer* DX11BufferPool::GetBuffer()
    {
        LockFreeStack::Node* pN = m_AvailableBuffers.pop_front();
        if( !pN )
        {
            // all out, make a new one
            ID3D11Buffer* pBuffer=0;
            m_pDevice->CreateBuffer( &m_Desc, 0, &pBuffer );
            Buffer* pBuff = new Buffer;
            pBuff->pBuffer.Owns( pBuffer );
            pN = pBuff;
            m_AllBuffers.push_front(pBuff);
        }
        
        Buffer* pB = static_cast<Buffer*>(pN);        
        return pB->pBuffer;       
    }

    //=====================================================================================================================
    //=====================================================================================================================
    void DX11BufferPool::RecycleBuffers()
    {
        m_AvailableBuffers.CopyFrom( m_AllBuffers );
    }

    //=====================================================================================================================
    //=====================================================================================================================    
    void DX11BufferPool::ReleaseBuffers()
    {
        LockFreeStack::Node* pN = m_AllBuffers.pop_front_serial();
        while( pN )
        {
            delete pN;
            pN = m_AllBuffers.pop_front_serial();
        }
    }


    //=====================================================================================================================
    //
    //           Protected Methods
    //
    //=====================================================================================================================
    
    //=====================================================================================================================
    //
    //            Private Methods
    //
    //=====================================================================================================================
}

